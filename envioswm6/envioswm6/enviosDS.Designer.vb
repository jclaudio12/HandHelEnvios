'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.4214
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data

'
'Microsoft.CompactFramework.Design.Data generó automáticamente este código fuente, versión=2.0.50727.4214.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("enviosDS")>  _
Partial Public Class enviosDS
    Inherits Global.System.Data.DataSet
    
    Private tableTB_DETALLE_ENVIO As TB_DETALLE_ENVIODataTable
    
    Private tableTB_ENVIOS As TB_ENVIOSDataTable
    
    Private tableTB_PARAMETROS As TB_PARAMETROSDataTable
    
    Private tableTB_USUARIOS As TB_USUARIOSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property TB_DETALLE_ENVIO() As TB_DETALLE_ENVIODataTable
        Get
            Return Me.tableTB_DETALLE_ENVIO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property TB_ENVIOS() As TB_ENVIOSDataTable
        Get
            Return Me.tableTB_ENVIOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property TB_PARAMETROS() As TB_PARAMETROSDataTable
        Get
            Return Me.tableTB_PARAMETROS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property TB_USUARIOS() As TB_USUARIOSDataTable
        Get
            Return Me.tableTB_USUARIOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As enviosDS = CType(MyBase.Clone,enviosDS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TB_DETALLE_ENVIO")) Is Nothing) Then
                MyBase.Tables.Add(New TB_DETALLE_ENVIODataTable(ds.Tables("TB_DETALLE_ENVIO")))
            End If
            If (Not (ds.Tables("TB_ENVIOS")) Is Nothing) Then
                MyBase.Tables.Add(New TB_ENVIOSDataTable(ds.Tables("TB_ENVIOS")))
            End If
            If (Not (ds.Tables("TB_PARAMETROS")) Is Nothing) Then
                MyBase.Tables.Add(New TB_PARAMETROSDataTable(ds.Tables("TB_PARAMETROS")))
            End If
            If (Not (ds.Tables("TB_USUARIOS")) Is Nothing) Then
                MyBase.Tables.Add(New TB_USUARIOSDataTable(ds.Tables("TB_USUARIOS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTB_DETALLE_ENVIO = CType(MyBase.Tables("TB_DETALLE_ENVIO"),TB_DETALLE_ENVIODataTable)
        If (initTable = true) Then
            If (Not (Me.tableTB_DETALLE_ENVIO) Is Nothing) Then
                Me.tableTB_DETALLE_ENVIO.InitVars
            End If
        End If
        Me.tableTB_ENVIOS = CType(MyBase.Tables("TB_ENVIOS"),TB_ENVIOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTB_ENVIOS) Is Nothing) Then
                Me.tableTB_ENVIOS.InitVars
            End If
        End If
        Me.tableTB_PARAMETROS = CType(MyBase.Tables("TB_PARAMETROS"),TB_PARAMETROSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTB_PARAMETROS) Is Nothing) Then
                Me.tableTB_PARAMETROS.InitVars
            End If
        End If
        Me.tableTB_USUARIOS = CType(MyBase.Tables("TB_USUARIOS"),TB_USUARIOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTB_USUARIOS) Is Nothing) Then
                Me.tableTB_USUARIOS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "enviosDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/enviosDS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTB_DETALLE_ENVIO = New TB_DETALLE_ENVIODataTable
        MyBase.Tables.Add(Me.tableTB_DETALLE_ENVIO)
        Me.tableTB_ENVIOS = New TB_ENVIOSDataTable
        MyBase.Tables.Add(Me.tableTB_ENVIOS)
        Me.tableTB_PARAMETROS = New TB_PARAMETROSDataTable
        MyBase.Tables.Add(Me.tableTB_PARAMETROS)
        Me.tableTB_USUARIOS = New TB_USUARIOSDataTable
        MyBase.Tables.Add(Me.tableTB_USUARIOS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTB_DETALLE_ENVIO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTB_ENVIOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTB_PARAMETROS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTB_USUARIOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As enviosDS = New enviosDS
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub TB_DETALLE_ENVIORowChangeEventHandler(ByVal sender As Object, ByVal e As TB_DETALLE_ENVIORowChangeEvent)
    
    Public Delegate Sub TB_ENVIOSRowChangeEventHandler(ByVal sender As Object, ByVal e As TB_ENVIOSRowChangeEvent)
    
    Public Delegate Sub TB_PARAMETROSRowChangeEventHandler(ByVal sender As Object, ByVal e As TB_PARAMETROSRowChangeEvent)
    
    Public Delegate Sub TB_USUARIOSRowChangeEventHandler(ByVal sender As Object, ByVal e As TB_USUARIOSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TB_DETALLE_ENVIODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnENVIO As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnDETALLE As Global.System.Data.DataColumn
        
        Private columnFILA As Global.System.Data.DataColumn
        
        Private columnPOSICION As Global.System.Data.DataColumn
        
        Private columnCORTADOR As Global.System.Data.DataColumn
        
        Private columnUNIDAD As Global.System.Data.DataColumn
        
        Private columnFECHA_CORTE As Global.System.Data.DataColumn
        
        Private columnEQUIVALENCIA As Global.System.Data.DataColumn
        
        Private columnOPERADOR_TRA As Global.System.Data.DataColumn
        
        Private columnOPERADOR_ALZ As Global.System.Data.DataColumn
        
        Private columnALZADORA As Global.System.Data.DataColumn
        
        Private columnTRACTOR As Global.System.Data.DataColumn
        
        Private columnCARRETAS As Global.System.Data.DataColumn
        
        Private columnCONTRATISTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TB_DETALLE_ENVIO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENVIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DETALLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDETALLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FILAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFILA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POSICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CORTADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCORTADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_CORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_CORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EQUIVALENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEQUIVALENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPERADOR_TRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPERADOR_TRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPERADOR_ALZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPERADOR_ALZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALZADORAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALZADORA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRACTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRACTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CARRETASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARRETAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONTRATISTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTRATISTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TB_DETALLE_ENVIORow
            Get
                Return CType(Me.Rows(index),TB_DETALLE_ENVIORow)
            End Get
        End Property
        
        Public Event TB_DETALLE_ENVIORowChanging As TB_DETALLE_ENVIORowChangeEventHandler
        
        Public Event TB_DETALLE_ENVIORowChanged As TB_DETALLE_ENVIORowChangeEventHandler
        
        Public Event TB_DETALLE_ENVIORowDeleting As TB_DETALLE_ENVIORowChangeEventHandler
        
        Public Event TB_DETALLE_ENVIORowDeleted As TB_DETALLE_ENVIORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTB_DETALLE_ENVIORow(ByVal row As TB_DETALLE_ENVIORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTB_DETALLE_ENVIORow( _
                    ByVal SERIE As String,  _
                    ByVal ENVIO As String,  _
                    ByVal TIPO As String,  _
                    ByVal DETALLE As String,  _
                    ByVal FILA As String,  _
                    ByVal POSICION As String,  _
                    ByVal CORTADOR As String,  _
                    ByVal UNIDAD As String,  _
                    ByVal FECHA_CORTE As String,  _
                    ByVal EQUIVALENCIA As String,  _
                    ByVal OPERADOR_TRA As String,  _
                    ByVal OPERADOR_ALZ As String,  _
                    ByVal ALZADORA As String,  _
                    ByVal TRACTOR As String,  _
                    ByVal CARRETAS As String,  _
                    ByVal CONTRATISTA As Decimal) As TB_DETALLE_ENVIORow
            Dim rowTB_DETALLE_ENVIORow As TB_DETALLE_ENVIORow = CType(Me.NewRow,TB_DETALLE_ENVIORow)
            Dim columnValuesArray() As Object = New Object() {SERIE, ENVIO, TIPO, DETALLE, FILA, POSICION, CORTADOR, UNIDAD, FECHA_CORTE, EQUIVALENCIA, OPERADOR_TRA, OPERADOR_ALZ, ALZADORA, TRACTOR, CARRETAS, CONTRATISTA}
            rowTB_DETALLE_ENVIORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTB_DETALLE_ENVIORow)
            Return rowTB_DETALLE_ENVIORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TB_DETALLE_ENVIODataTable = CType(MyBase.Clone,TB_DETALLE_ENVIODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TB_DETALLE_ENVIODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnENVIO = MyBase.Columns("ENVIO")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnDETALLE = MyBase.Columns("DETALLE")
            Me.columnFILA = MyBase.Columns("FILA")
            Me.columnPOSICION = MyBase.Columns("POSICION")
            Me.columnCORTADOR = MyBase.Columns("CORTADOR")
            Me.columnUNIDAD = MyBase.Columns("UNIDAD")
            Me.columnFECHA_CORTE = MyBase.Columns("FECHA_CORTE")
            Me.columnEQUIVALENCIA = MyBase.Columns("EQUIVALENCIA")
            Me.columnOPERADOR_TRA = MyBase.Columns("OPERADOR_TRA")
            Me.columnOPERADOR_ALZ = MyBase.Columns("OPERADOR_ALZ")
            Me.columnALZADORA = MyBase.Columns("ALZADORA")
            Me.columnTRACTOR = MyBase.Columns("TRACTOR")
            Me.columnCARRETAS = MyBase.Columns("CARRETAS")
            Me.columnCONTRATISTA = MyBase.Columns("CONTRATISTA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnENVIO = New Global.System.Data.DataColumn("ENVIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIO)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnDETALLE = New Global.System.Data.DataColumn("DETALLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDETALLE)
            Me.columnFILA = New Global.System.Data.DataColumn("FILA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFILA)
            Me.columnPOSICION = New Global.System.Data.DataColumn("POSICION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSICION)
            Me.columnCORTADOR = New Global.System.Data.DataColumn("CORTADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCORTADOR)
            Me.columnUNIDAD = New Global.System.Data.DataColumn("UNIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD)
            Me.columnFECHA_CORTE = New Global.System.Data.DataColumn("FECHA_CORTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_CORTE)
            Me.columnEQUIVALENCIA = New Global.System.Data.DataColumn("EQUIVALENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEQUIVALENCIA)
            Me.columnOPERADOR_TRA = New Global.System.Data.DataColumn("OPERADOR_TRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPERADOR_TRA)
            Me.columnOPERADOR_ALZ = New Global.System.Data.DataColumn("OPERADOR_ALZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPERADOR_ALZ)
            Me.columnALZADORA = New Global.System.Data.DataColumn("ALZADORA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALZADORA)
            Me.columnTRACTOR = New Global.System.Data.DataColumn("TRACTOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRACTOR)
            Me.columnCARRETAS = New Global.System.Data.DataColumn("CARRETAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARRETAS)
            Me.columnCONTRATISTA = New Global.System.Data.DataColumn("CONTRATISTA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTRATISTA)
            Me.columnSERIE.MaxLength = 100
            Me.columnENVIO.MaxLength = 100
            Me.columnTIPO.MaxLength = 100
            Me.columnDETALLE.MaxLength = 100
            Me.columnFILA.MaxLength = 100
            Me.columnPOSICION.MaxLength = 100
            Me.columnCORTADOR.MaxLength = 100
            Me.columnUNIDAD.MaxLength = 100
            Me.columnFECHA_CORTE.MaxLength = 100
            Me.columnEQUIVALENCIA.MaxLength = 100
            Me.columnOPERADOR_TRA.MaxLength = 100
            Me.columnOPERADOR_ALZ.MaxLength = 100
            Me.columnALZADORA.MaxLength = 100
            Me.columnTRACTOR.MaxLength = 100
            Me.columnCARRETAS.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTB_DETALLE_ENVIORow() As TB_DETALLE_ENVIORow
            Return CType(Me.NewRow,TB_DETALLE_ENVIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TB_DETALLE_ENVIORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TB_DETALLE_ENVIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TB_DETALLE_ENVIORowChangedEvent) Is Nothing) Then
                RaiseEvent TB_DETALLE_ENVIORowChanged(Me, New TB_DETALLE_ENVIORowChangeEvent(CType(e.Row,TB_DETALLE_ENVIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TB_DETALLE_ENVIORowChangingEvent) Is Nothing) Then
                RaiseEvent TB_DETALLE_ENVIORowChanging(Me, New TB_DETALLE_ENVIORowChangeEvent(CType(e.Row,TB_DETALLE_ENVIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TB_DETALLE_ENVIORowDeletedEvent) Is Nothing) Then
                RaiseEvent TB_DETALLE_ENVIORowDeleted(Me, New TB_DETALLE_ENVIORowChangeEvent(CType(e.Row,TB_DETALLE_ENVIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TB_DETALLE_ENVIORowDeletingEvent) Is Nothing) Then
                RaiseEvent TB_DETALLE_ENVIORowDeleting(Me, New TB_DETALLE_ENVIORowChangeEvent(CType(e.Row,TB_DETALLE_ENVIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTB_DETALLE_ENVIORow(ByVal row As TB_DETALLE_ENVIORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As enviosDS = New enviosDS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TB_DETALLE_ENVIODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TB_ENVIOSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnENVIO As Global.System.Data.DataColumn
        
        Private columnFECHA_ENVIO As Global.System.Data.DataColumn
        
        Private columnFINCA As Global.System.Data.DataColumn
        
        Private columnFRENTE As Global.System.Data.DataColumn
        
        Private columnPANTE1 As Global.System.Data.DataColumn
        
        Private columnPANTE2 As Global.System.Data.DataColumn
        
        Private columnPANTE3 As Global.System.Data.DataColumn
        
        Private columnPANTE4 As Global.System.Data.DataColumn
        
        Private columnLOTE1 As Global.System.Data.DataColumn
        
        Private columnLOTE2 As Global.System.Data.DataColumn
        
        Private columnLOTE3 As Global.System.Data.DataColumn
        
        Private columnLOTE4 As Global.System.Data.DataColumn
        
        Private columnFECHA_QUEMA1 As Global.System.Data.DataColumn
        
        Private columnFECHA_QUEMA2 As Global.System.Data.DataColumn
        
        Private columnFECHA_QUEMA3 As Global.System.Data.DataColumn
        
        Private columnFECHA_QUEMA4 As Global.System.Data.DataColumn
        
        Private columnRUTA As Global.System.Data.DataColumn
        
        Private columnZONA As Global.System.Data.DataColumn
        
        Private columnTURNO As Global.System.Data.DataColumn
        
        Private columnTRANSPORTISTA As Global.System.Data.DataColumn
        
        Private columnVEHICULO As Global.System.Data.DataColumn
        
        Private columnPILOTO As Global.System.Data.DataColumn
        
        Private columnEMPRESA As Global.System.Data.DataColumn
        
        Private columnPERIODO_COSECHA As Global.System.Data.DataColumn
        
        Private columnENVIERO As Global.System.Data.DataColumn
        
        Private columnCONTRATISTA As Global.System.Data.DataColumn
        
        Private columnPLATAFORMA As Global.System.Data.DataColumn
        
        Private columnCOLERA As Global.System.Data.DataColumn
        
        Private columnUNIDAD1 As Global.System.Data.DataColumn
        
        Private columnUNIDAD2 As Global.System.Data.DataColumn
        
        Private columnUNIDAD3 As Global.System.Data.DataColumn
        
        Private columnUNIDAD4 As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnIMPRESIONES As Global.System.Data.DataColumn
        
        Private columnFECHA_DESPACHO As Global.System.Data.DataColumn
        
        Private columnALZADOR As Global.System.Data.DataColumn
        
        Private columnTRACTOR As Global.System.Data.DataColumn
        
        Private columnOP_ALZADOR As Global.System.Data.DataColumn
        
        Private columnOP_TRACTOR As Global.System.Data.DataColumn
        
        Private columnBOLETA_TRANSPORTE As Global.System.Data.DataColumn
        
        Private columnFECHA_TURNO As Global.System.Data.DataColumn
        
        Private columnPRESENTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TB_ENVIOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENVIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_ENVIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ENVIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFRENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PANTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPANTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PANTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPANTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PANTE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPANTE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PANTE4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPANTE4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOTE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOTE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOTE4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOTE4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_QUEMA1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_QUEMA1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_QUEMA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_QUEMA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_QUEMA3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_QUEMA3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_QUEMA4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_QUEMA4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRUTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZONAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZONA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TURNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTURNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANSPORTISTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSPORTISTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VEHICULOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVEHICULO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PILOTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPILOTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERIODO_COSECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIODO_COSECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENVIEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONTRATISTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTRATISTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLATAFORMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLATAFORMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLERAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLERA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDAD1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDAD2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDAD3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDAD4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPRESIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPRESIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DESPACHOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DESPACHO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALZADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALZADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRACTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRACTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OP_ALZADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOP_ALZADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OP_TRACTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOP_TRACTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BOLETA_TRANSPORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBOLETA_TRANSPORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_TURNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_TURNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TB_ENVIOSRow
            Get
                Return CType(Me.Rows(index),TB_ENVIOSRow)
            End Get
        End Property
        
        Public Event TB_ENVIOSRowChanging As TB_ENVIOSRowChangeEventHandler
        
        Public Event TB_ENVIOSRowChanged As TB_ENVIOSRowChangeEventHandler
        
        Public Event TB_ENVIOSRowDeleting As TB_ENVIOSRowChangeEventHandler
        
        Public Event TB_ENVIOSRowDeleted As TB_ENVIOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTB_ENVIOSRow(ByVal row As TB_ENVIOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTB_ENVIOSRow( _
                    ByVal SERIE As String,  _
                    ByVal ENVIO As Decimal,  _
                    ByVal FECHA_ENVIO As Date,  _
                    ByVal FINCA As Decimal,  _
                    ByVal FRENTE As Decimal,  _
                    ByVal PANTE1 As Decimal,  _
                    ByVal PANTE2 As Decimal,  _
                    ByVal PANTE3 As Decimal,  _
                    ByVal PANTE4 As Decimal,  _
                    ByVal LOTE1 As Decimal,  _
                    ByVal LOTE2 As Decimal,  _
                    ByVal LOTE3 As Decimal,  _
                    ByVal LOTE4 As Decimal,  _
                    ByVal FECHA_QUEMA1 As Date,  _
                    ByVal FECHA_QUEMA2 As Date,  _
                    ByVal FECHA_QUEMA3 As Date,  _
                    ByVal FECHA_QUEMA4 As Date,  _
                    ByVal RUTA As Decimal,  _
                    ByVal ZONA As Decimal,  _
                    ByVal TURNO As String,  _
                    ByVal TRANSPORTISTA As Decimal,  _
                    ByVal VEHICULO As Decimal,  _
                    ByVal PILOTO As Decimal,  _
                    ByVal EMPRESA As Decimal,  _
                    ByVal PERIODO_COSECHA As Decimal,  _
                    ByVal ENVIERO As Decimal,  _
                    ByVal CONTRATISTA As Decimal,  _
                    ByVal PLATAFORMA As Decimal,  _
                    ByVal COLERA As Decimal,  _
                    ByVal UNIDAD1 As Decimal,  _
                    ByVal UNIDAD2 As Decimal,  _
                    ByVal UNIDAD3 As Decimal,  _
                    ByVal UNIDAD4 As Decimal,  _
                    ByVal TIPO As String,  _
                    ByVal IMPRESIONES As Decimal,  _
                    ByVal FECHA_DESPACHO As Date,  _
                    ByVal ALZADOR As Decimal,  _
                    ByVal TRACTOR As Decimal,  _
                    ByVal OP_ALZADOR As Decimal,  _
                    ByVal OP_TRACTOR As Decimal,  _
                    ByVal BOLETA_TRANSPORTE As Decimal,  _
                    ByVal FECHA_TURNO As Date,  _
                    ByVal PRESENTA As String) As TB_ENVIOSRow
            Dim rowTB_ENVIOSRow As TB_ENVIOSRow = CType(Me.NewRow,TB_ENVIOSRow)
            Dim columnValuesArray() As Object = New Object() {SERIE, ENVIO, FECHA_ENVIO, FINCA, FRENTE, PANTE1, PANTE2, PANTE3, PANTE4, LOTE1, LOTE2, LOTE3, LOTE4, FECHA_QUEMA1, FECHA_QUEMA2, FECHA_QUEMA3, FECHA_QUEMA4, RUTA, ZONA, TURNO, TRANSPORTISTA, VEHICULO, PILOTO, EMPRESA, PERIODO_COSECHA, ENVIERO, CONTRATISTA, PLATAFORMA, COLERA, UNIDAD1, UNIDAD2, UNIDAD3, UNIDAD4, TIPO, IMPRESIONES, FECHA_DESPACHO, ALZADOR, TRACTOR, OP_ALZADOR, OP_TRACTOR, BOLETA_TRANSPORTE, FECHA_TURNO, PRESENTA}
            rowTB_ENVIOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTB_ENVIOSRow)
            Return rowTB_ENVIOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySERIEENVIO(ByVal SERIE As String, ByVal ENVIO As Decimal) As TB_ENVIOSRow
            Return CType(Me.Rows.Find(New Object() {SERIE, ENVIO}),TB_ENVIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TB_ENVIOSDataTable = CType(MyBase.Clone,TB_ENVIOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TB_ENVIOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnENVIO = MyBase.Columns("ENVIO")
            Me.columnFECHA_ENVIO = MyBase.Columns("FECHA_ENVIO")
            Me.columnFINCA = MyBase.Columns("FINCA")
            Me.columnFRENTE = MyBase.Columns("FRENTE")
            Me.columnPANTE1 = MyBase.Columns("PANTE1")
            Me.columnPANTE2 = MyBase.Columns("PANTE2")
            Me.columnPANTE3 = MyBase.Columns("PANTE3")
            Me.columnPANTE4 = MyBase.Columns("PANTE4")
            Me.columnLOTE1 = MyBase.Columns("LOTE1")
            Me.columnLOTE2 = MyBase.Columns("LOTE2")
            Me.columnLOTE3 = MyBase.Columns("LOTE3")
            Me.columnLOTE4 = MyBase.Columns("LOTE4")
            Me.columnFECHA_QUEMA1 = MyBase.Columns("FECHA_QUEMA1")
            Me.columnFECHA_QUEMA2 = MyBase.Columns("FECHA_QUEMA2")
            Me.columnFECHA_QUEMA3 = MyBase.Columns("FECHA_QUEMA3")
            Me.columnFECHA_QUEMA4 = MyBase.Columns("FECHA_QUEMA4")
            Me.columnRUTA = MyBase.Columns("RUTA")
            Me.columnZONA = MyBase.Columns("ZONA")
            Me.columnTURNO = MyBase.Columns("TURNO")
            Me.columnTRANSPORTISTA = MyBase.Columns("TRANSPORTISTA")
            Me.columnVEHICULO = MyBase.Columns("VEHICULO")
            Me.columnPILOTO = MyBase.Columns("PILOTO")
            Me.columnEMPRESA = MyBase.Columns("EMPRESA")
            Me.columnPERIODO_COSECHA = MyBase.Columns("PERIODO_COSECHA")
            Me.columnENVIERO = MyBase.Columns("ENVIERO")
            Me.columnCONTRATISTA = MyBase.Columns("CONTRATISTA")
            Me.columnPLATAFORMA = MyBase.Columns("PLATAFORMA")
            Me.columnCOLERA = MyBase.Columns("COLERA")
            Me.columnUNIDAD1 = MyBase.Columns("UNIDAD1")
            Me.columnUNIDAD2 = MyBase.Columns("UNIDAD2")
            Me.columnUNIDAD3 = MyBase.Columns("UNIDAD3")
            Me.columnUNIDAD4 = MyBase.Columns("UNIDAD4")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnIMPRESIONES = MyBase.Columns("IMPRESIONES")
            Me.columnFECHA_DESPACHO = MyBase.Columns("FECHA_DESPACHO")
            Me.columnALZADOR = MyBase.Columns("ALZADOR")
            Me.columnTRACTOR = MyBase.Columns("TRACTOR")
            Me.columnOP_ALZADOR = MyBase.Columns("OP_ALZADOR")
            Me.columnOP_TRACTOR = MyBase.Columns("OP_TRACTOR")
            Me.columnBOLETA_TRANSPORTE = MyBase.Columns("BOLETA_TRANSPORTE")
            Me.columnFECHA_TURNO = MyBase.Columns("FECHA_TURNO")
            Me.columnPRESENTA = MyBase.Columns("PRESENTA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnENVIO = New Global.System.Data.DataColumn("ENVIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIO)
            Me.columnFECHA_ENVIO = New Global.System.Data.DataColumn("FECHA_ENVIO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ENVIO)
            Me.columnFINCA = New Global.System.Data.DataColumn("FINCA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCA)
            Me.columnFRENTE = New Global.System.Data.DataColumn("FRENTE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRENTE)
            Me.columnPANTE1 = New Global.System.Data.DataColumn("PANTE1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPANTE1)
            Me.columnPANTE2 = New Global.System.Data.DataColumn("PANTE2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPANTE2)
            Me.columnPANTE3 = New Global.System.Data.DataColumn("PANTE3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPANTE3)
            Me.columnPANTE4 = New Global.System.Data.DataColumn("PANTE4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPANTE4)
            Me.columnLOTE1 = New Global.System.Data.DataColumn("LOTE1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOTE1)
            Me.columnLOTE2 = New Global.System.Data.DataColumn("LOTE2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOTE2)
            Me.columnLOTE3 = New Global.System.Data.DataColumn("LOTE3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOTE3)
            Me.columnLOTE4 = New Global.System.Data.DataColumn("LOTE4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOTE4)
            Me.columnFECHA_QUEMA1 = New Global.System.Data.DataColumn("FECHA_QUEMA1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_QUEMA1)
            Me.columnFECHA_QUEMA2 = New Global.System.Data.DataColumn("FECHA_QUEMA2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_QUEMA2)
            Me.columnFECHA_QUEMA3 = New Global.System.Data.DataColumn("FECHA_QUEMA3", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_QUEMA3)
            Me.columnFECHA_QUEMA4 = New Global.System.Data.DataColumn("FECHA_QUEMA4", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_QUEMA4)
            Me.columnRUTA = New Global.System.Data.DataColumn("RUTA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUTA)
            Me.columnZONA = New Global.System.Data.DataColumn("ZONA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZONA)
            Me.columnTURNO = New Global.System.Data.DataColumn("TURNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTURNO)
            Me.columnTRANSPORTISTA = New Global.System.Data.DataColumn("TRANSPORTISTA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSPORTISTA)
            Me.columnVEHICULO = New Global.System.Data.DataColumn("VEHICULO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVEHICULO)
            Me.columnPILOTO = New Global.System.Data.DataColumn("PILOTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPILOTO)
            Me.columnEMPRESA = New Global.System.Data.DataColumn("EMPRESA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPRESA)
            Me.columnPERIODO_COSECHA = New Global.System.Data.DataColumn("PERIODO_COSECHA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIODO_COSECHA)
            Me.columnENVIERO = New Global.System.Data.DataColumn("ENVIERO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIERO)
            Me.columnCONTRATISTA = New Global.System.Data.DataColumn("CONTRATISTA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTRATISTA)
            Me.columnPLATAFORMA = New Global.System.Data.DataColumn("PLATAFORMA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLATAFORMA)
            Me.columnCOLERA = New Global.System.Data.DataColumn("COLERA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLERA)
            Me.columnUNIDAD1 = New Global.System.Data.DataColumn("UNIDAD1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD1)
            Me.columnUNIDAD2 = New Global.System.Data.DataColumn("UNIDAD2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD2)
            Me.columnUNIDAD3 = New Global.System.Data.DataColumn("UNIDAD3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD3)
            Me.columnUNIDAD4 = New Global.System.Data.DataColumn("UNIDAD4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD4)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnIMPRESIONES = New Global.System.Data.DataColumn("IMPRESIONES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPRESIONES)
            Me.columnFECHA_DESPACHO = New Global.System.Data.DataColumn("FECHA_DESPACHO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DESPACHO)
            Me.columnALZADOR = New Global.System.Data.DataColumn("ALZADOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALZADOR)
            Me.columnTRACTOR = New Global.System.Data.DataColumn("TRACTOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRACTOR)
            Me.columnOP_ALZADOR = New Global.System.Data.DataColumn("OP_ALZADOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOP_ALZADOR)
            Me.columnOP_TRACTOR = New Global.System.Data.DataColumn("OP_TRACTOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOP_TRACTOR)
            Me.columnBOLETA_TRANSPORTE = New Global.System.Data.DataColumn("BOLETA_TRANSPORTE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBOLETA_TRANSPORTE)
            Me.columnFECHA_TURNO = New Global.System.Data.DataColumn("FECHA_TURNO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_TURNO)
            Me.columnPRESENTA = New Global.System.Data.DataColumn("PRESENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESENTA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSERIE, Me.columnENVIO}, true))
            Me.columnSERIE.AllowDBNull = false
            Me.columnSERIE.MaxLength = 6
            Me.columnENVIO.AllowDBNull = false
            Me.columnTURNO.MaxLength = 3
            Me.columnTIPO.MaxLength = 1
            Me.columnPRESENTA.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTB_ENVIOSRow() As TB_ENVIOSRow
            Return CType(Me.NewRow,TB_ENVIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TB_ENVIOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TB_ENVIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TB_ENVIOSRowChangedEvent) Is Nothing) Then
                RaiseEvent TB_ENVIOSRowChanged(Me, New TB_ENVIOSRowChangeEvent(CType(e.Row,TB_ENVIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TB_ENVIOSRowChangingEvent) Is Nothing) Then
                RaiseEvent TB_ENVIOSRowChanging(Me, New TB_ENVIOSRowChangeEvent(CType(e.Row,TB_ENVIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TB_ENVIOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent TB_ENVIOSRowDeleted(Me, New TB_ENVIOSRowChangeEvent(CType(e.Row,TB_ENVIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TB_ENVIOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent TB_ENVIOSRowDeleting(Me, New TB_ENVIOSRowChangeEvent(CType(e.Row,TB_ENVIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTB_ENVIOSRow(ByVal row As TB_ENVIOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As enviosDS = New enviosDS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TB_ENVIOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TB_PARAMETROSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID_ALZADORA As Global.System.Data.DataColumn
        
        Private columnID_OPERADOR_A As Global.System.Data.DataColumn
        
        Private columnID_TRACTOR As Global.System.Data.DataColumn
        
        Private columnID_OPERADOR_T As Global.System.Data.DataColumn
        
        Private columnID_ENVIERO As Global.System.Data.DataColumn
        
        Private columnFECHA_TURNO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TB_PARAMETROS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_ALZADORAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ALZADORA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_OPERADOR_AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_OPERADOR_A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_TRACTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_TRACTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_OPERADOR_TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_OPERADOR_T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_ENVIEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ENVIERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_TURNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_TURNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TB_PARAMETROSRow
            Get
                Return CType(Me.Rows(index),TB_PARAMETROSRow)
            End Get
        End Property
        
        Public Event TB_PARAMETROSRowChanging As TB_PARAMETROSRowChangeEventHandler
        
        Public Event TB_PARAMETROSRowChanged As TB_PARAMETROSRowChangeEventHandler
        
        Public Event TB_PARAMETROSRowDeleting As TB_PARAMETROSRowChangeEventHandler
        
        Public Event TB_PARAMETROSRowDeleted As TB_PARAMETROSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTB_PARAMETROSRow(ByVal row As TB_PARAMETROSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTB_PARAMETROSRow(ByVal ID_ALZADORA As Decimal, ByVal ID_OPERADOR_A As Decimal, ByVal ID_TRACTOR As Decimal, ByVal ID_OPERADOR_T As Decimal, ByVal ID_ENVIERO As Decimal, ByVal FECHA_TURNO As Date) As TB_PARAMETROSRow
            Dim rowTB_PARAMETROSRow As TB_PARAMETROSRow = CType(Me.NewRow,TB_PARAMETROSRow)
            Dim columnValuesArray() As Object = New Object() {ID_ALZADORA, ID_OPERADOR_A, ID_TRACTOR, ID_OPERADOR_T, ID_ENVIERO, FECHA_TURNO}
            rowTB_PARAMETROSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTB_PARAMETROSRow)
            Return rowTB_PARAMETROSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TB_PARAMETROSDataTable = CType(MyBase.Clone,TB_PARAMETROSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TB_PARAMETROSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_ALZADORA = MyBase.Columns("ID_ALZADORA")
            Me.columnID_OPERADOR_A = MyBase.Columns("ID_OPERADOR_A")
            Me.columnID_TRACTOR = MyBase.Columns("ID_TRACTOR")
            Me.columnID_OPERADOR_T = MyBase.Columns("ID_OPERADOR_T")
            Me.columnID_ENVIERO = MyBase.Columns("ID_ENVIERO")
            Me.columnFECHA_TURNO = MyBase.Columns("FECHA_TURNO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_ALZADORA = New Global.System.Data.DataColumn("ID_ALZADORA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ALZADORA)
            Me.columnID_OPERADOR_A = New Global.System.Data.DataColumn("ID_OPERADOR_A", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_OPERADOR_A)
            Me.columnID_TRACTOR = New Global.System.Data.DataColumn("ID_TRACTOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_TRACTOR)
            Me.columnID_OPERADOR_T = New Global.System.Data.DataColumn("ID_OPERADOR_T", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_OPERADOR_T)
            Me.columnID_ENVIERO = New Global.System.Data.DataColumn("ID_ENVIERO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ENVIERO)
            Me.columnFECHA_TURNO = New Global.System.Data.DataColumn("FECHA_TURNO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_TURNO)
            Me.columnID_ALZADORA.AllowDBNull = false
            Me.columnID_OPERADOR_A.AllowDBNull = false
            Me.columnID_TRACTOR.AllowDBNull = false
            Me.columnID_OPERADOR_T.AllowDBNull = false
            Me.columnID_ENVIERO.AllowDBNull = false
            Me.columnFECHA_TURNO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTB_PARAMETROSRow() As TB_PARAMETROSRow
            Return CType(Me.NewRow,TB_PARAMETROSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TB_PARAMETROSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TB_PARAMETROSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TB_PARAMETROSRowChangedEvent) Is Nothing) Then
                RaiseEvent TB_PARAMETROSRowChanged(Me, New TB_PARAMETROSRowChangeEvent(CType(e.Row,TB_PARAMETROSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TB_PARAMETROSRowChangingEvent) Is Nothing) Then
                RaiseEvent TB_PARAMETROSRowChanging(Me, New TB_PARAMETROSRowChangeEvent(CType(e.Row,TB_PARAMETROSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TB_PARAMETROSRowDeletedEvent) Is Nothing) Then
                RaiseEvent TB_PARAMETROSRowDeleted(Me, New TB_PARAMETROSRowChangeEvent(CType(e.Row,TB_PARAMETROSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TB_PARAMETROSRowDeletingEvent) Is Nothing) Then
                RaiseEvent TB_PARAMETROSRowDeleting(Me, New TB_PARAMETROSRowChangeEvent(CType(e.Row,TB_PARAMETROSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTB_PARAMETROSRow(ByVal row As TB_PARAMETROSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As enviosDS = New enviosDS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TB_PARAMETROSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TB_USUARIOSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnUSUARIO As Global.System.Data.DataColumn
        
        Private columnPASSWORD As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TB_USUARIOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PASSWORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPASSWORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TB_USUARIOSRow
            Get
                Return CType(Me.Rows(index),TB_USUARIOSRow)
            End Get
        End Property
        
        Public Event TB_USUARIOSRowChanging As TB_USUARIOSRowChangeEventHandler
        
        Public Event TB_USUARIOSRowChanged As TB_USUARIOSRowChangeEventHandler
        
        Public Event TB_USUARIOSRowDeleting As TB_USUARIOSRowChangeEventHandler
        
        Public Event TB_USUARIOSRowDeleted As TB_USUARIOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTB_USUARIOSRow(ByVal row As TB_USUARIOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTB_USUARIOSRow(ByVal USUARIO As String, ByVal PASSWORD As String, ByVal ESTADO As String) As TB_USUARIOSRow
            Dim rowTB_USUARIOSRow As TB_USUARIOSRow = CType(Me.NewRow,TB_USUARIOSRow)
            Dim columnValuesArray() As Object = New Object() {USUARIO, PASSWORD, ESTADO}
            rowTB_USUARIOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTB_USUARIOSRow)
            Return rowTB_USUARIOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TB_USUARIOSDataTable = CType(MyBase.Clone,TB_USUARIOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TB_USUARIOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUSUARIO = MyBase.Columns("USUARIO")
            Me.columnPASSWORD = MyBase.Columns("PASSWORD")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUSUARIO = New Global.System.Data.DataColumn("USUARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO)
            Me.columnPASSWORD = New Global.System.Data.DataColumn("PASSWORD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPASSWORD)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnUSUARIO.MaxLength = 50
            Me.columnPASSWORD.MaxLength = 50
            Me.columnESTADO.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTB_USUARIOSRow() As TB_USUARIOSRow
            Return CType(Me.NewRow,TB_USUARIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TB_USUARIOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TB_USUARIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TB_USUARIOSRowChangedEvent) Is Nothing) Then
                RaiseEvent TB_USUARIOSRowChanged(Me, New TB_USUARIOSRowChangeEvent(CType(e.Row,TB_USUARIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TB_USUARIOSRowChangingEvent) Is Nothing) Then
                RaiseEvent TB_USUARIOSRowChanging(Me, New TB_USUARIOSRowChangeEvent(CType(e.Row,TB_USUARIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TB_USUARIOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent TB_USUARIOSRowDeleted(Me, New TB_USUARIOSRowChangeEvent(CType(e.Row,TB_USUARIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TB_USUARIOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent TB_USUARIOSRowDeleting(Me, New TB_USUARIOSRowChangeEvent(CType(e.Row,TB_USUARIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTB_USUARIOSRow(ByVal row As TB_USUARIOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As enviosDS = New enviosDS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TB_USUARIOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TB_DETALLE_ENVIORow
        Inherits Global.System.Data.DataRow
        
        Private tableTB_DETALLE_ENVIO As TB_DETALLE_ENVIODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTB_DETALLE_ENVIO = CType(Me.Table,TB_DETALLE_ENVIODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SERIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.SERIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SERIE' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENVIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.ENVIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ENVIO' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.ENVIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DETALLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.DETALLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DETALLE' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.DETALLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FILA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.FILAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FILA' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.FILAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POSICION() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.POSICIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'POSICION' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.POSICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CORTADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.CORTADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CORTADOR' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.CORTADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.UNIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_CORTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.FECHA_CORTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_CORTE' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.FECHA_CORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EQUIVALENCIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.EQUIVALENCIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EQUIVALENCIA' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.EQUIVALENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPERADOR_TRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.OPERADOR_TRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OPERADOR_TRA' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.OPERADOR_TRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPERADOR_ALZ() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.OPERADOR_ALZColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OPERADOR_ALZ' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.OPERADOR_ALZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALZADORA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.ALZADORAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ALZADORA' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.ALZADORAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRACTOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.TRACTORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TRACTOR' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.TRACTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CARRETAS() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.CARRETASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CARRETAS' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.CARRETASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONTRATISTA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_DETALLE_ENVIO.CONTRATISTAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CONTRATISTA' de la tabla 'TB_DETALLE_ENVIO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_DETALLE_ENVIO.CONTRATISTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSERIENull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.SERIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSERIENull()
            Me(Me.tableTB_DETALLE_ENVIO.SERIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENVIONull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.ENVIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENVIONull()
            Me(Me.tableTB_DETALLE_ENVIO.ENVIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPONull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPONull()
            Me(Me.tableTB_DETALLE_ENVIO.TIPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDETALLENull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.DETALLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDETALLENull()
            Me(Me.tableTB_DETALLE_ENVIO.DETALLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFILANull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.FILAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFILANull()
            Me(Me.tableTB_DETALLE_ENVIO.FILAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOSICIONNull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.POSICIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOSICIONNull()
            Me(Me.tableTB_DETALLE_ENVIO.POSICIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCORTADORNull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.CORTADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCORTADORNull()
            Me(Me.tableTB_DETALLE_ENVIO.CORTADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDADNull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDADNull()
            Me(Me.tableTB_DETALLE_ENVIO.UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_CORTENull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.FECHA_CORTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_CORTENull()
            Me(Me.tableTB_DETALLE_ENVIO.FECHA_CORTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEQUIVALENCIANull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.EQUIVALENCIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEQUIVALENCIANull()
            Me(Me.tableTB_DETALLE_ENVIO.EQUIVALENCIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPERADOR_TRANull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.OPERADOR_TRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPERADOR_TRANull()
            Me(Me.tableTB_DETALLE_ENVIO.OPERADOR_TRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPERADOR_ALZNull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.OPERADOR_ALZColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPERADOR_ALZNull()
            Me(Me.tableTB_DETALLE_ENVIO.OPERADOR_ALZColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALZADORANull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.ALZADORAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALZADORANull()
            Me(Me.tableTB_DETALLE_ENVIO.ALZADORAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRACTORNull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.TRACTORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRACTORNull()
            Me(Me.tableTB_DETALLE_ENVIO.TRACTORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCARRETASNull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.CARRETASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCARRETASNull()
            Me(Me.tableTB_DETALLE_ENVIO.CARRETASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCONTRATISTANull() As Boolean
            Return Me.IsNull(Me.tableTB_DETALLE_ENVIO.CONTRATISTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCONTRATISTANull()
            Me(Me.tableTB_DETALLE_ENVIO.CONTRATISTAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TB_ENVIOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableTB_ENVIOS As TB_ENVIOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTB_ENVIOS = CType(Me.Table,TB_ENVIOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SERIE() As String
            Get
                Return CType(Me(Me.tableTB_ENVIOS.SERIEColumn),String)
            End Get
            Set
                Me(Me.tableTB_ENVIOS.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENVIO() As Decimal
            Get
                Return CType(Me(Me.tableTB_ENVIOS.ENVIOColumn),Decimal)
            End Get
            Set
                Me(Me.tableTB_ENVIOS.ENVIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_ENVIO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.FECHA_ENVIOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_ENVIO' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.FECHA_ENVIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.FINCAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FINCA' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.FINCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRENTE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.FRENTEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FRENTE' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.FRENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PANTE1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.PANTE1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PANTE1' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.PANTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PANTE2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.PANTE2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PANTE2' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.PANTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PANTE3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.PANTE3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PANTE3' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.PANTE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PANTE4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.PANTE4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PANTE4' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.PANTE4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOTE1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.LOTE1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LOTE1' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.LOTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOTE2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.LOTE2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LOTE2' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.LOTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOTE3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.LOTE3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LOTE3' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.LOTE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOTE4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.LOTE4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LOTE4' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.LOTE4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_QUEMA1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.FECHA_QUEMA1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_QUEMA1' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.FECHA_QUEMA1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_QUEMA2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.FECHA_QUEMA2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_QUEMA2' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.FECHA_QUEMA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_QUEMA3() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.FECHA_QUEMA3Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_QUEMA3' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.FECHA_QUEMA3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_QUEMA4() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.FECHA_QUEMA4Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_QUEMA4' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.FECHA_QUEMA4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUTA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.RUTAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RUTA' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.RUTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZONA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.ZONAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ZONA' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.ZONAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TURNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.TURNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TURNO' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.TURNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANSPORTISTA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.TRANSPORTISTAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TRANSPORTISTA' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.TRANSPORTISTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VEHICULO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.VEHICULOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VEHICULO' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.VEHICULOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PILOTO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.PILOTOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PILOTO' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.PILOTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMPRESA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.EMPRESAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EMPRESA' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERIODO_COSECHA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.PERIODO_COSECHAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PERIODO_COSECHA' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.PERIODO_COSECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENVIERO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.ENVIEROColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ENVIERO' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.ENVIEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONTRATISTA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.CONTRATISTAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CONTRATISTA' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.CONTRATISTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLATAFORMA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.PLATAFORMAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PLATAFORMA' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.PLATAFORMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLERA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.COLERAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLERA' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.COLERAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.UNIDAD1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD1' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.UNIDAD1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.UNIDAD2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD2' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.UNIDAD2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.UNIDAD3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD3' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.UNIDAD3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.UNIDAD4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD4' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.UNIDAD4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPRESIONES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.IMPRESIONESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMPRESIONES' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.IMPRESIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DESPACHO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.FECHA_DESPACHOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_DESPACHO' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.FECHA_DESPACHOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALZADOR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.ALZADORColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ALZADOR' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.ALZADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRACTOR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.TRACTORColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TRACTOR' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.TRACTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OP_ALZADOR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.OP_ALZADORColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OP_ALZADOR' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.OP_ALZADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OP_TRACTOR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.OP_TRACTORColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OP_TRACTOR' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.OP_TRACTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BOLETA_TRANSPORTE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.BOLETA_TRANSPORTEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BOLETA_TRANSPORTE' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.BOLETA_TRANSPORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_TURNO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.FECHA_TURNOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_TURNO' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.FECHA_TURNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESENTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_ENVIOS.PRESENTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRESENTA' de la tabla 'TB_ENVIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_ENVIOS.PRESENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_ENVIONull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.FECHA_ENVIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_ENVIONull()
            Me(Me.tableTB_ENVIOS.FECHA_ENVIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFINCANull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.FINCAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFINCANull()
            Me(Me.tableTB_ENVIOS.FINCAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFRENTENull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.FRENTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFRENTENull()
            Me(Me.tableTB_ENVIOS.FRENTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPANTE1Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.PANTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPANTE1Null()
            Me(Me.tableTB_ENVIOS.PANTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPANTE2Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.PANTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPANTE2Null()
            Me(Me.tableTB_ENVIOS.PANTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPANTE3Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.PANTE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPANTE3Null()
            Me(Me.tableTB_ENVIOS.PANTE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPANTE4Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.PANTE4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPANTE4Null()
            Me(Me.tableTB_ENVIOS.PANTE4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOTE1Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.LOTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOTE1Null()
            Me(Me.tableTB_ENVIOS.LOTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOTE2Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.LOTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOTE2Null()
            Me(Me.tableTB_ENVIOS.LOTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOTE3Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.LOTE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOTE3Null()
            Me(Me.tableTB_ENVIOS.LOTE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOTE4Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.LOTE4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOTE4Null()
            Me(Me.tableTB_ENVIOS.LOTE4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_QUEMA1Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.FECHA_QUEMA1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_QUEMA1Null()
            Me(Me.tableTB_ENVIOS.FECHA_QUEMA1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_QUEMA2Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.FECHA_QUEMA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_QUEMA2Null()
            Me(Me.tableTB_ENVIOS.FECHA_QUEMA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_QUEMA3Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.FECHA_QUEMA3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_QUEMA3Null()
            Me(Me.tableTB_ENVIOS.FECHA_QUEMA3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_QUEMA4Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.FECHA_QUEMA4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_QUEMA4Null()
            Me(Me.tableTB_ENVIOS.FECHA_QUEMA4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRUTANull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.RUTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRUTANull()
            Me(Me.tableTB_ENVIOS.RUTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZONANull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.ZONAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZONANull()
            Me(Me.tableTB_ENVIOS.ZONAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTURNONull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.TURNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTURNONull()
            Me(Me.tableTB_ENVIOS.TURNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANSPORTISTANull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.TRANSPORTISTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANSPORTISTANull()
            Me(Me.tableTB_ENVIOS.TRANSPORTISTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVEHICULONull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.VEHICULOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVEHICULONull()
            Me(Me.tableTB_ENVIOS.VEHICULOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPILOTONull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.PILOTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPILOTONull()
            Me(Me.tableTB_ENVIOS.PILOTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMPRESANull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMPRESANull()
            Me(Me.tableTB_ENVIOS.EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPERIODO_COSECHANull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.PERIODO_COSECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPERIODO_COSECHANull()
            Me(Me.tableTB_ENVIOS.PERIODO_COSECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENVIERONull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.ENVIEROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENVIERONull()
            Me(Me.tableTB_ENVIOS.ENVIEROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCONTRATISTANull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.CONTRATISTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCONTRATISTANull()
            Me(Me.tableTB_ENVIOS.CONTRATISTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLATAFORMANull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.PLATAFORMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLATAFORMANull()
            Me(Me.tableTB_ENVIOS.PLATAFORMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLERANull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.COLERAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLERANull()
            Me(Me.tableTB_ENVIOS.COLERAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDAD1Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.UNIDAD1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDAD1Null()
            Me(Me.tableTB_ENVIOS.UNIDAD1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDAD2Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.UNIDAD2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDAD2Null()
            Me(Me.tableTB_ENVIOS.UNIDAD2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDAD3Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.UNIDAD3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDAD3Null()
            Me(Me.tableTB_ENVIOS.UNIDAD3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDAD4Null() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.UNIDAD4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDAD4Null()
            Me(Me.tableTB_ENVIOS.UNIDAD4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPONull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPONull()
            Me(Me.tableTB_ENVIOS.TIPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPRESIONESNull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.IMPRESIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPRESIONESNull()
            Me(Me.tableTB_ENVIOS.IMPRESIONESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DESPACHONull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.FECHA_DESPACHOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DESPACHONull()
            Me(Me.tableTB_ENVIOS.FECHA_DESPACHOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALZADORNull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.ALZADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALZADORNull()
            Me(Me.tableTB_ENVIOS.ALZADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRACTORNull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.TRACTORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRACTORNull()
            Me(Me.tableTB_ENVIOS.TRACTORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOP_ALZADORNull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.OP_ALZADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOP_ALZADORNull()
            Me(Me.tableTB_ENVIOS.OP_ALZADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOP_TRACTORNull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.OP_TRACTORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOP_TRACTORNull()
            Me(Me.tableTB_ENVIOS.OP_TRACTORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBOLETA_TRANSPORTENull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.BOLETA_TRANSPORTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBOLETA_TRANSPORTENull()
            Me(Me.tableTB_ENVIOS.BOLETA_TRANSPORTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_TURNONull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.FECHA_TURNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_TURNONull()
            Me(Me.tableTB_ENVIOS.FECHA_TURNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRESENTANull() As Boolean
            Return Me.IsNull(Me.tableTB_ENVIOS.PRESENTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRESENTANull()
            Me(Me.tableTB_ENVIOS.PRESENTAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TB_PARAMETROSRow
        Inherits Global.System.Data.DataRow
        
        Private tableTB_PARAMETROS As TB_PARAMETROSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTB_PARAMETROS = CType(Me.Table,TB_PARAMETROSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_ALZADORA() As Decimal
            Get
                Return CType(Me(Me.tableTB_PARAMETROS.ID_ALZADORAColumn),Decimal)
            End Get
            Set
                Me(Me.tableTB_PARAMETROS.ID_ALZADORAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_OPERADOR_A() As Decimal
            Get
                Return CType(Me(Me.tableTB_PARAMETROS.ID_OPERADOR_AColumn),Decimal)
            End Get
            Set
                Me(Me.tableTB_PARAMETROS.ID_OPERADOR_AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_TRACTOR() As Decimal
            Get
                Return CType(Me(Me.tableTB_PARAMETROS.ID_TRACTORColumn),Decimal)
            End Get
            Set
                Me(Me.tableTB_PARAMETROS.ID_TRACTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_OPERADOR_T() As Decimal
            Get
                Return CType(Me(Me.tableTB_PARAMETROS.ID_OPERADOR_TColumn),Decimal)
            End Get
            Set
                Me(Me.tableTB_PARAMETROS.ID_OPERADOR_TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_ENVIERO() As Decimal
            Get
                Return CType(Me(Me.tableTB_PARAMETROS.ID_ENVIEROColumn),Decimal)
            End Get
            Set
                Me(Me.tableTB_PARAMETROS.ID_ENVIEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_TURNO() As Date
            Get
                Return CType(Me(Me.tableTB_PARAMETROS.FECHA_TURNOColumn),Date)
            End Get
            Set
                Me(Me.tableTB_PARAMETROS.FECHA_TURNOColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TB_USUARIOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableTB_USUARIOS As TB_USUARIOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTB_USUARIOS = CType(Me.Table,TB_USUARIOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_USUARIOS.USUARIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USUARIO' de la tabla 'TB_USUARIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_USUARIOS.USUARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PASSWORD() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_USUARIOS.PASSWORDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PASSWORD' de la tabla 'TB_USUARIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_USUARIOS.PASSWORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTB_USUARIOS.ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ESTADO' de la tabla 'TB_USUARIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTB_USUARIOS.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSUARIONull() As Boolean
            Return Me.IsNull(Me.tableTB_USUARIOS.USUARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSUARIONull()
            Me(Me.tableTB_USUARIOS.USUARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPASSWORDNull() As Boolean
            Return Me.IsNull(Me.tableTB_USUARIOS.PASSWORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPASSWORDNull()
            Me(Me.tableTB_USUARIOS.PASSWORDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTADONull() As Boolean
            Return Me.IsNull(Me.tableTB_USUARIOS.ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTADONull()
            Me(Me.tableTB_USUARIOS.ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class TB_DETALLE_ENVIORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TB_DETALLE_ENVIORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TB_DETALLE_ENVIORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TB_DETALLE_ENVIORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class TB_ENVIOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TB_ENVIOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TB_ENVIOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TB_ENVIOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class TB_PARAMETROSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TB_PARAMETROSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TB_PARAMETROSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TB_PARAMETROSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class TB_USUARIOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TB_USUARIOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TB_USUARIOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TB_USUARIOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace enviosDSTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class TB_DETALLE_ENVIOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TB_DETALLE_ENVIO"
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("ENVIO", "ENVIO")
            tableMapping.ColumnMappings.Add("TIPO", "TIPO")
            tableMapping.ColumnMappings.Add("DETALLE", "DETALLE")
            tableMapping.ColumnMappings.Add("FILA", "FILA")
            tableMapping.ColumnMappings.Add("POSICION", "POSICION")
            tableMapping.ColumnMappings.Add("CORTADOR", "CORTADOR")
            tableMapping.ColumnMappings.Add("UNIDAD", "UNIDAD")
            tableMapping.ColumnMappings.Add("FECHA_CORTE", "FECHA_CORTE")
            tableMapping.ColumnMappings.Add("EQUIVALENCIA", "EQUIVALENCIA")
            tableMapping.ColumnMappings.Add("OPERADOR_TRA", "OPERADOR_TRA")
            tableMapping.ColumnMappings.Add("OPERADOR_ALZ", "OPERADOR_ALZ")
            tableMapping.ColumnMappings.Add("ALZADORA", "ALZADORA")
            tableMapping.ColumnMappings.Add("TRACTOR", "TRACTOR")
            tableMapping.ColumnMappings.Add("CARRETAS", "CARRETAS")
            tableMapping.ColumnMappings.Add("CONTRATISTA", "CONTRATISTA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TB_DETALLE_ENVIO] ([SERIE], [ENVIO], [TIPO], [DETALLE], [FILA], [POS"& _ 
                "ICION], [CORTADOR], [UNIDAD], [FECHA_CORTE], [EQUIVALENCIA], [OPERADOR_TRA], [OP"& _ 
                "ERADOR_ALZ], [ALZADORA], [TRACTOR], [CARRETAS], [CONTRATISTA]) VALUES (@p1, @p2,"& _ 
                " @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ENVIO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "TIPO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DETALLE", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FILA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "POSICION", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CORTADOR", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p8", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "UNIDAD", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p9", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_CORTE", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "EQUIVALENCIA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p11", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "OPERADOR_TRA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p12", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "OPERADOR_ALZ", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p13", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ALZADORA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p14", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "TRACTOR", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p15", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CARRETAS", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p16", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CONTRATISTA", Global.System.Data.DataRowVersion.Current, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\envios.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [SERIE], [ENVIO], [TIPO], [DETALLE], [FILA], [POSICION], [CORTADOR], [UNID"& _ 
                "AD], [FECHA_CORTE], [EQUIVALENCIA], [OPERADOR_TRA], [OPERADOR_ALZ], [ALZADORA], "& _ 
                "[TRACTOR], [CARRETAS], [CONTRATISTA] FROM [TB_DETALLE_ENVIO]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As enviosDS.TB_DETALLE_ENVIODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As enviosDS.TB_DETALLE_ENVIODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As enviosDS.TB_DETALLE_ENVIODataTable = New enviosDS.TB_DETALLE_ENVIODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As enviosDS.TB_DETALLE_ENVIODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As enviosDS) As Integer
            Return Me.Adapter.Update(dataSet, "TB_DETALLE_ENVIO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As Global.System.Nullable(Of Decimal)) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class TB_ENVIOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TB_ENVIOS"
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("ENVIO", "ENVIO")
            tableMapping.ColumnMappings.Add("FECHA_ENVIO", "FECHA_ENVIO")
            tableMapping.ColumnMappings.Add("FINCA", "FINCA")
            tableMapping.ColumnMappings.Add("FRENTE", "FRENTE")
            tableMapping.ColumnMappings.Add("PANTE1", "PANTE1")
            tableMapping.ColumnMappings.Add("PANTE2", "PANTE2")
            tableMapping.ColumnMappings.Add("PANTE3", "PANTE3")
            tableMapping.ColumnMappings.Add("PANTE4", "PANTE4")
            tableMapping.ColumnMappings.Add("LOTE1", "LOTE1")
            tableMapping.ColumnMappings.Add("LOTE2", "LOTE2")
            tableMapping.ColumnMappings.Add("LOTE3", "LOTE3")
            tableMapping.ColumnMappings.Add("LOTE4", "LOTE4")
            tableMapping.ColumnMappings.Add("FECHA_QUEMA1", "FECHA_QUEMA1")
            tableMapping.ColumnMappings.Add("FECHA_QUEMA2", "FECHA_QUEMA2")
            tableMapping.ColumnMappings.Add("FECHA_QUEMA3", "FECHA_QUEMA3")
            tableMapping.ColumnMappings.Add("FECHA_QUEMA4", "FECHA_QUEMA4")
            tableMapping.ColumnMappings.Add("RUTA", "RUTA")
            tableMapping.ColumnMappings.Add("ZONA", "ZONA")
            tableMapping.ColumnMappings.Add("TURNO", "TURNO")
            tableMapping.ColumnMappings.Add("TRANSPORTISTA", "TRANSPORTISTA")
            tableMapping.ColumnMappings.Add("VEHICULO", "VEHICULO")
            tableMapping.ColumnMappings.Add("PILOTO", "PILOTO")
            tableMapping.ColumnMappings.Add("EMPRESA", "EMPRESA")
            tableMapping.ColumnMappings.Add("PERIODO_COSECHA", "PERIODO_COSECHA")
            tableMapping.ColumnMappings.Add("ENVIERO", "ENVIERO")
            tableMapping.ColumnMappings.Add("CONTRATISTA", "CONTRATISTA")
            tableMapping.ColumnMappings.Add("PLATAFORMA", "PLATAFORMA")
            tableMapping.ColumnMappings.Add("COLERA", "COLERA")
            tableMapping.ColumnMappings.Add("UNIDAD1", "UNIDAD1")
            tableMapping.ColumnMappings.Add("UNIDAD2", "UNIDAD2")
            tableMapping.ColumnMappings.Add("UNIDAD3", "UNIDAD3")
            tableMapping.ColumnMappings.Add("UNIDAD4", "UNIDAD4")
            tableMapping.ColumnMappings.Add("TIPO", "TIPO")
            tableMapping.ColumnMappings.Add("IMPRESIONES", "IMPRESIONES")
            tableMapping.ColumnMappings.Add("FECHA_DESPACHO", "FECHA_DESPACHO")
            tableMapping.ColumnMappings.Add("ALZADOR", "ALZADOR")
            tableMapping.ColumnMappings.Add("TRACTOR", "TRACTOR")
            tableMapping.ColumnMappings.Add("OP_ALZADOR", "OP_ALZADOR")
            tableMapping.ColumnMappings.Add("OP_TRACTOR", "OP_TRACTOR")
            tableMapping.ColumnMappings.Add("BOLETA_TRANSPORTE", "BOLETA_TRANSPORTE")
            tableMapping.ColumnMappings.Add("FECHA_TURNO", "FECHA_TURNO")
            tableMapping.ColumnMappings.Add("PRESENTA", "PRESENTA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TB_ENVIOS] WHERE (([SERIE] = @p1) AND ([ENVIO] = @p2))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Original, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ENVIO", Global.System.Data.DataRowVersion.Original, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TB_ENVIOS] ([SERIE], [ENVIO], [FECHA_ENVIO], [FINCA], [FRENTE], [PAN"& _ 
                "TE1], [PANTE2], [PANTE3], [PANTE4], [LOTE1], [LOTE2], [LOTE3], [LOTE4], [FECHA_Q"& _ 
                "UEMA1], [FECHA_QUEMA2], [FECHA_QUEMA3], [FECHA_QUEMA4], [RUTA], [ZONA], [TURNO],"& _ 
                " [TRANSPORTISTA], [VEHICULO], [PILOTO], [EMPRESA], [PERIODO_COSECHA], [ENVIERO],"& _ 
                " [CONTRATISTA], [PLATAFORMA], [COLERA], [UNIDAD1], [UNIDAD2], [UNIDAD3], [UNIDAD"& _ 
                "4], [TIPO], [IMPRESIONES], [FECHA_DESPACHO], [ALZADOR], [TRACTOR], [OP_ALZADOR],"& _ 
                " [OP_TRACTOR], [BOLETA_TRANSPORTE], [FECHA_TURNO], [PRESENTA]) VALUES (@p1, @p2,"& _ 
                " @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p"& _ 
                "17, @p18, @p19, @p20, @p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30"& _ 
                ", @p31, @p32, @p33, @p34, @p35, @p36, @p37, @p38, @p39, @p40, @p41, @p42, @p43)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ENVIO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_ENVIO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FINCA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FRENTE", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PANTE1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PANTE2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p8", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PANTE3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p9", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PANTE4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p10", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "LOTE1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p11", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "LOTE2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p12", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "LOTE3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p13", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "LOTE4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p14", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_QUEMA1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p15", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_QUEMA2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p16", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_QUEMA3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p17", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_QUEMA4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p18", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "RUTA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p19", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ZONA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p20", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "TURNO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p21", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "TRANSPORTISTA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p22", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "VEHICULO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p23", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PILOTO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p24", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "EMPRESA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p25", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PERIODO_COSECHA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p26", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ENVIERO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p27", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CONTRATISTA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p28", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PLATAFORMA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p29", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "COLERA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p30", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "UNIDAD1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p31", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "UNIDAD2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p32", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "UNIDAD3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p33", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "UNIDAD4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p34", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "TIPO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p35", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "IMPRESIONES", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p36", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_DESPACHO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p37", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ALZADOR", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p38", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "TRACTOR", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p39", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "OP_ALZADOR", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p40", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "OP_TRACTOR", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p41", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "BOLETA_TRANSPORTE", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p42", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_TURNO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p43", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PRESENTA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TB_ENVIOS] SET [SERIE] = @p1, [ENVIO] = @p2, [FECHA_ENVIO] = @p3, [FINCA]"& _ 
                " = @p4, [FRENTE] = @p5, [PANTE1] = @p6, [PANTE2] = @p7, [PANTE3] = @p8, [PANTE4]"& _ 
                " = @p9, [LOTE1] = @p10, [LOTE2] = @p11, [LOTE3] = @p12, [LOTE4] = @p13, [FECHA_Q"& _ 
                "UEMA1] = @p14, [FECHA_QUEMA2] = @p15, [FECHA_QUEMA3] = @p16, [FECHA_QUEMA4] = @p"& _ 
                "17, [RUTA] = @p18, [ZONA] = @p19, [TURNO] = @p20, [TRANSPORTISTA] = @p21, [VEHIC"& _ 
                "ULO] = @p22, [PILOTO] = @p23, [EMPRESA] = @p24, [PERIODO_COSECHA] = @p25, [ENVIE"& _ 
                "RO] = @p26, [CONTRATISTA] = @p27, [PLATAFORMA] = @p28, [COLERA] = @p29, [UNIDAD1"& _ 
                "] = @p30, [UNIDAD2] = @p31, [UNIDAD3] = @p32, [UNIDAD4] = @p33, [TIPO] = @p34, ["& _ 
                "IMPRESIONES] = @p35, [FECHA_DESPACHO] = @p36, [ALZADOR] = @p37, [TRACTOR] = @p38"& _ 
                ", [OP_ALZADOR] = @p39, [OP_TRACTOR] = @p40, [BOLETA_TRANSPORTE] = @p41, [FECHA_T"& _ 
                "URNO] = @p42, [PRESENTA] = @p43 WHERE (([SERIE] = @p44) AND ([ENVIO] = @p45))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ENVIO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_ENVIO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FINCA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FRENTE", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PANTE1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PANTE2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p8", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PANTE3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p9", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PANTE4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p10", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "LOTE1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p11", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "LOTE2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p12", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "LOTE3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p13", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "LOTE4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p14", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_QUEMA1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p15", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_QUEMA2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p16", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_QUEMA3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p17", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_QUEMA4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p18", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "RUTA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p19", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ZONA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p20", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "TURNO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p21", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "TRANSPORTISTA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p22", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "VEHICULO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p23", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PILOTO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p24", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "EMPRESA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p25", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PERIODO_COSECHA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p26", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ENVIERO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p27", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CONTRATISTA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p28", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PLATAFORMA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p29", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "COLERA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p30", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "UNIDAD1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p31", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "UNIDAD2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p32", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "UNIDAD3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p33", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "UNIDAD4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p34", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "TIPO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p35", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "IMPRESIONES", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p36", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_DESPACHO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p37", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ALZADOR", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p38", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "TRACTOR", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p39", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "OP_ALZADOR", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p40", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "OP_TRACTOR", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p41", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "BOLETA_TRANSPORTE", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p42", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_TURNO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p43", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PRESENTA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p44", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "SERIE", Global.System.Data.DataRowVersion.Original, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p45", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ENVIO", Global.System.Data.DataRowVersion.Original, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\envios.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [SERIE], [ENVIO], [FECHA_ENVIO], [FINCA], [FRENTE], [PANTE1], [PANTE2], [P"& _ 
                "ANTE3], [PANTE4], [LOTE1], [LOTE2], [LOTE3], [LOTE4], [FECHA_QUEMA1], [FECHA_QUE"& _ 
                "MA2], [FECHA_QUEMA3], [FECHA_QUEMA4], [RUTA], [ZONA], [TURNO], [TRANSPORTISTA], "& _ 
                "[VEHICULO], [PILOTO], [EMPRESA], [PERIODO_COSECHA], [ENVIERO], [CONTRATISTA], [P"& _ 
                "LATAFORMA], [COLERA], [UNIDAD1], [UNIDAD2], [UNIDAD3], [UNIDAD4], [TIPO], [IMPRE"& _ 
                "SIONES], [FECHA_DESPACHO], [ALZADOR], [TRACTOR], [OP_ALZADOR], [OP_TRACTOR], [BO"& _ 
                "LETA_TRANSPORTE], [FECHA_TURNO], [PRESENTA] FROM [TB_ENVIOS]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As enviosDS.TB_ENVIOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As enviosDS.TB_ENVIOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As enviosDS.TB_ENVIOSDataTable = New enviosDS.TB_ENVIOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As enviosDS.TB_ENVIOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As enviosDS) As Integer
            Return Me.Adapter.Update(dataSet, "TB_ENVIOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As Decimal) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As Decimal,  _
                    ByVal p3 As Global.System.Nullable(Of Date),  _
                    ByVal p4 As Global.System.Nullable(Of Decimal),  _
                    ByVal p5 As Global.System.Nullable(Of Decimal),  _
                    ByVal p6 As Global.System.Nullable(Of Decimal),  _
                    ByVal p7 As Global.System.Nullable(Of Decimal),  _
                    ByVal p8 As Global.System.Nullable(Of Decimal),  _
                    ByVal p9 As Global.System.Nullable(Of Decimal),  _
                    ByVal p10 As Global.System.Nullable(Of Decimal),  _
                    ByVal p11 As Global.System.Nullable(Of Decimal),  _
                    ByVal p12 As Global.System.Nullable(Of Decimal),  _
                    ByVal p13 As Global.System.Nullable(Of Decimal),  _
                    ByVal p14 As Global.System.Nullable(Of Date),  _
                    ByVal p15 As Global.System.Nullable(Of Date),  _
                    ByVal p16 As Global.System.Nullable(Of Date),  _
                    ByVal p17 As Global.System.Nullable(Of Date),  _
                    ByVal p18 As Global.System.Nullable(Of Decimal),  _
                    ByVal p19 As Global.System.Nullable(Of Decimal),  _
                    ByVal p20 As String,  _
                    ByVal p21 As Global.System.Nullable(Of Decimal),  _
                    ByVal p22 As Global.System.Nullable(Of Decimal),  _
                    ByVal p23 As Global.System.Nullable(Of Decimal),  _
                    ByVal p24 As Global.System.Nullable(Of Decimal),  _
                    ByVal p25 As Global.System.Nullable(Of Decimal),  _
                    ByVal p26 As Global.System.Nullable(Of Decimal),  _
                    ByVal p27 As Global.System.Nullable(Of Decimal),  _
                    ByVal p28 As Global.System.Nullable(Of Decimal),  _
                    ByVal p29 As Global.System.Nullable(Of Decimal),  _
                    ByVal p30 As Global.System.Nullable(Of Decimal),  _
                    ByVal p31 As Global.System.Nullable(Of Decimal),  _
                    ByVal p32 As Global.System.Nullable(Of Decimal),  _
                    ByVal p33 As Global.System.Nullable(Of Decimal),  _
                    ByVal p34 As String,  _
                    ByVal p35 As Global.System.Nullable(Of Decimal),  _
                    ByVal p36 As Global.System.Nullable(Of Date),  _
                    ByVal p37 As Global.System.Nullable(Of Decimal),  _
                    ByVal p38 As Global.System.Nullable(Of Decimal),  _
                    ByVal p39 As Global.System.Nullable(Of Decimal),  _
                    ByVal p40 As Global.System.Nullable(Of Decimal),  _
                    ByVal p41 As Global.System.Nullable(Of Decimal),  _
                    ByVal p42 As Global.System.Nullable(Of Date),  _
                    ByVal p43 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,Decimal)
            If (p3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (p8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (p12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (p14.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (p15.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (p17.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p17.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (p18.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(p18.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (p19.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(p19.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p21.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(p21.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (p22.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(p22.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (p23.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(p23.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (p24.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(p24.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (p25.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(p25.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (p26.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(p26.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (p27.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(p27.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (p28.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(p28.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (p29.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(p29.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (p30.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(p30.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (p31.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(p31.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (p32.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(p32.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (p33.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(p33.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (p34 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(p34,String)
            End If
            If (p35.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(p35.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (p36.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(p36.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (p37.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(p37.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (p38.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(p38.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (p39.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(p39.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (p40.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(p40.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (p41.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(p41.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (p42.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(p42.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (p43 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(p43,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As Decimal,  _
                    ByVal p3 As Global.System.Nullable(Of Date),  _
                    ByVal p4 As Global.System.Nullable(Of Decimal),  _
                    ByVal p5 As Global.System.Nullable(Of Decimal),  _
                    ByVal p6 As Global.System.Nullable(Of Decimal),  _
                    ByVal p7 As Global.System.Nullable(Of Decimal),  _
                    ByVal p8 As Global.System.Nullable(Of Decimal),  _
                    ByVal p9 As Global.System.Nullable(Of Decimal),  _
                    ByVal p10 As Global.System.Nullable(Of Decimal),  _
                    ByVal p11 As Global.System.Nullable(Of Decimal),  _
                    ByVal p12 As Global.System.Nullable(Of Decimal),  _
                    ByVal p13 As Global.System.Nullable(Of Decimal),  _
                    ByVal p14 As Global.System.Nullable(Of Date),  _
                    ByVal p15 As Global.System.Nullable(Of Date),  _
                    ByVal p16 As Global.System.Nullable(Of Date),  _
                    ByVal p17 As Global.System.Nullable(Of Date),  _
                    ByVal p18 As Global.System.Nullable(Of Decimal),  _
                    ByVal p19 As Global.System.Nullable(Of Decimal),  _
                    ByVal p20 As String,  _
                    ByVal p21 As Global.System.Nullable(Of Decimal),  _
                    ByVal p22 As Global.System.Nullable(Of Decimal),  _
                    ByVal p23 As Global.System.Nullable(Of Decimal),  _
                    ByVal p24 As Global.System.Nullable(Of Decimal),  _
                    ByVal p25 As Global.System.Nullable(Of Decimal),  _
                    ByVal p26 As Global.System.Nullable(Of Decimal),  _
                    ByVal p27 As Global.System.Nullable(Of Decimal),  _
                    ByVal p28 As Global.System.Nullable(Of Decimal),  _
                    ByVal p29 As Global.System.Nullable(Of Decimal),  _
                    ByVal p30 As Global.System.Nullable(Of Decimal),  _
                    ByVal p31 As Global.System.Nullable(Of Decimal),  _
                    ByVal p32 As Global.System.Nullable(Of Decimal),  _
                    ByVal p33 As Global.System.Nullable(Of Decimal),  _
                    ByVal p34 As String,  _
                    ByVal p35 As Global.System.Nullable(Of Decimal),  _
                    ByVal p36 As Global.System.Nullable(Of Date),  _
                    ByVal p37 As Global.System.Nullable(Of Decimal),  _
                    ByVal p38 As Global.System.Nullable(Of Decimal),  _
                    ByVal p39 As Global.System.Nullable(Of Decimal),  _
                    ByVal p40 As Global.System.Nullable(Of Decimal),  _
                    ByVal p41 As Global.System.Nullable(Of Decimal),  _
                    ByVal p42 As Global.System.Nullable(Of Date),  _
                    ByVal p43 As String,  _
                    ByVal p44 As String,  _
                    ByVal p45 As Decimal) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,Decimal)
            If (p3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (p8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (p12.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (p14.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (p15.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (p17.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (p18.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (p19.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p21.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p21.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (p22.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(p22.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (p23.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p23.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (p24.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p24.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (p25.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(p25.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (p26.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(p26.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (p27.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(p27.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (p28.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(p28.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (p29.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(p29.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (p30.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(p30.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (p31.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(p31.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (p32.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(p32.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (p33.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(p33.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (p34 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(p34,String)
            End If
            If (p35.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(p35.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (p36.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(p36.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (p37.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(p37.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (p38.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(p38.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (p39.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(p39.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (p40.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(p40.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (p41.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(p41.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (p42.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(p42.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (p43 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(p43,String)
            End If
            If (p44 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p44")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(p44,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(44).Value = CType(p45,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p3 As Global.System.Nullable(Of Date),  _
                    ByVal p4 As Global.System.Nullable(Of Decimal),  _
                    ByVal p5 As Global.System.Nullable(Of Decimal),  _
                    ByVal p6 As Global.System.Nullable(Of Decimal),  _
                    ByVal p7 As Global.System.Nullable(Of Decimal),  _
                    ByVal p8 As Global.System.Nullable(Of Decimal),  _
                    ByVal p9 As Global.System.Nullable(Of Decimal),  _
                    ByVal p10 As Global.System.Nullable(Of Decimal),  _
                    ByVal p11 As Global.System.Nullable(Of Decimal),  _
                    ByVal p12 As Global.System.Nullable(Of Decimal),  _
                    ByVal p13 As Global.System.Nullable(Of Decimal),  _
                    ByVal p14 As Global.System.Nullable(Of Date),  _
                    ByVal p15 As Global.System.Nullable(Of Date),  _
                    ByVal p16 As Global.System.Nullable(Of Date),  _
                    ByVal p17 As Global.System.Nullable(Of Date),  _
                    ByVal p18 As Global.System.Nullable(Of Decimal),  _
                    ByVal p19 As Global.System.Nullable(Of Decimal),  _
                    ByVal p20 As String,  _
                    ByVal p21 As Global.System.Nullable(Of Decimal),  _
                    ByVal p22 As Global.System.Nullable(Of Decimal),  _
                    ByVal p23 As Global.System.Nullable(Of Decimal),  _
                    ByVal p24 As Global.System.Nullable(Of Decimal),  _
                    ByVal p25 As Global.System.Nullable(Of Decimal),  _
                    ByVal p26 As Global.System.Nullable(Of Decimal),  _
                    ByVal p27 As Global.System.Nullable(Of Decimal),  _
                    ByVal p28 As Global.System.Nullable(Of Decimal),  _
                    ByVal p29 As Global.System.Nullable(Of Decimal),  _
                    ByVal p30 As Global.System.Nullable(Of Decimal),  _
                    ByVal p31 As Global.System.Nullable(Of Decimal),  _
                    ByVal p32 As Global.System.Nullable(Of Decimal),  _
                    ByVal p33 As Global.System.Nullable(Of Decimal),  _
                    ByVal p34 As String,  _
                    ByVal p35 As Global.System.Nullable(Of Decimal),  _
                    ByVal p36 As Global.System.Nullable(Of Date),  _
                    ByVal p37 As Global.System.Nullable(Of Decimal),  _
                    ByVal p38 As Global.System.Nullable(Of Decimal),  _
                    ByVal p39 As Global.System.Nullable(Of Decimal),  _
                    ByVal p40 As Global.System.Nullable(Of Decimal),  _
                    ByVal p41 As Global.System.Nullable(Of Decimal),  _
                    ByVal p42 As Global.System.Nullable(Of Date),  _
                    ByVal p43 As String,  _
                    ByVal p44 As String,  _
                    ByVal p45 As Decimal) As Integer
            Return Me.Update(p44, p45, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class TB_PARAMETROSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TB_PARAMETROS"
            tableMapping.ColumnMappings.Add("ID_ALZADORA", "ID_ALZADORA")
            tableMapping.ColumnMappings.Add("ID_OPERADOR_A", "ID_OPERADOR_A")
            tableMapping.ColumnMappings.Add("ID_TRACTOR", "ID_TRACTOR")
            tableMapping.ColumnMappings.Add("ID_OPERADOR_T", "ID_OPERADOR_T")
            tableMapping.ColumnMappings.Add("ID_ENVIERO", "ID_ENVIERO")
            tableMapping.ColumnMappings.Add("FECHA_TURNO", "FECHA_TURNO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TB_PARAMETROS] ([ID_ALZADORA], [ID_OPERADOR_A], [ID_TRACTOR], [ID_OP"& _ 
                "ERADOR_T], [ID_ENVIERO], [FECHA_TURNO]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID_ALZADORA", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID_OPERADOR_A", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID_TRACTOR", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID_OPERADOR_T", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID_ENVIERO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "FECHA_TURNO", Global.System.Data.DataRowVersion.Current, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\envios.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [ID_ALZADORA], [ID_OPERADOR_A], [ID_TRACTOR], [ID_OPERADOR_T], [ID_ENVIERO"& _ 
                "], [FECHA_TURNO] FROM [TB_PARAMETROS]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As enviosDS.TB_PARAMETROSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As enviosDS.TB_PARAMETROSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As enviosDS.TB_PARAMETROSDataTable = New enviosDS.TB_PARAMETROSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As enviosDS.TB_PARAMETROSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As enviosDS) As Integer
            Return Me.Adapter.Update(dataSet, "TB_PARAMETROS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As Decimal, ByVal p2 As Decimal, ByVal p3 As Decimal, ByVal p4 As Decimal, ByVal p5 As Decimal, ByVal p6 As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class TB_USUARIOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TB_USUARIOS"
            tableMapping.ColumnMappings.Add("USUARIO", "USUARIO")
            tableMapping.ColumnMappings.Add("PASSWORD", "PASSWORD")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TB_USUARIOS] ([USUARIO], [PASSWORD], [ESTADO]) VALUES (@p1, @p2, @p3"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "USUARIO", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PASSWORD", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ESTADO", Global.System.Data.DataRowVersion.Current, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\envios.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [USUARIO], [PASSWORD], [ESTADO] FROM [TB_USUARIOS]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As enviosDS.TB_USUARIOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As enviosDS.TB_USUARIOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As enviosDS.TB_USUARIOSDataTable = New enviosDS.TB_USUARIOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As enviosDS.TB_USUARIOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As enviosDS) As Integer
            Return Me.Adapter.Update(dataSet, "TB_USUARIOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace

Namespace enviosDSUtil
    
    Partial Public Class DesignerUtil
        
        Public Shared Function IsDesignTime() As Boolean
            'Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("B77A5C561934E089") Then
                    Return true
                End If
            End If
            Return false
        End Function
        
        Public Shared Function IsRunTime() As Boolean
            'Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("969DB8053D3322AC") Then
                    Return true
                End If
            End If
            Return false
        End Function
    End Class
End Namespace
